#
# single 只启动单个服务注册中心时使用的配置文件
# (为了留下注释，因此采用了 properties 格式的配置)
# @author Shiyunlai
#

# :::: 服务注册中心的端口 ::::
# 默认 18000
server.port=18000

# :::: 应用名称 ::::
spring.application.name=tools-eureka-server

# :::: 本服务注册中心实例的hostname ::::
# 默认为 "127.0.0.1" 或实际的IP地址.
# 也可以指定为有意义的名称，如： eureka-server-1
# 则需要设置：
# 1. 加IP映射，修改服务器 /etc/hosts 文件，增加一条，如：
#   127.0.0.1       eureka-server-1
# 2. 同时设置 eureka.instance.hostname=eureka-server-1
eureka.instance.hostname=127.0.0.1
#
# 定义服务失效时间，默认为90秒
eureka.instance.lease-expiration-duration-in-seconds=90
#
# 定义服务续约的间隔时间，默认为30秒
eureka.instance.lease-renewal-interval-in-seconds=30

# :::: 关闭保护机制 ::::
# Eureka Server在运行期间会去统计心跳失败比例在15分钟之内是否低于85%，
# 如果低于85%，Eureka Server会将这些实例保护起来，让这些实例不会过期，
# 但是在保护期内如果服务刚好这个服务提供者非正常下线了，
# 此时服务消费者就会拿到一个无效的服务实例，此时会调用失败，
# 对于这个问题需要服务消费者端要有一些容错机制，如重试，断路器等。
# 我们在单机测试的时候很容易满足心跳失败比例在15分钟之内低于85%，
# 这个时候就会触发Eureka的保护机制，一旦开启了保护机制，则服务注册中心维护的服务实例就不是那么准确了，
# 此时我们可以使用eureka.server.enable-self-preservation=false来关闭保护机制，
# 这样可以确保注册中心中不可用的实例被及时的剔除
eureka.server.enable-self-preservation=false
#
# 续期时间，即扫描失效服务的间隔时间（缺省为60*1000ms）
eureka.server.eviction-interval-timer-in-ms=5000

# :::: register-with-eureka: 向注册中心注册 ::::
# register-with-eureka: 是否指明目标注册中心
# 创建的应用是一个服务注册中心，而不是普通的应用，
# 默认情况下，这个应用会向注册中心（也是它自己）注册它自己，
# 设置为false表示禁止这种默认行为
eureka.client.register-with-eureka=false
#
# fetch-registry: 是否检索其他的服务，
# 因为服务注册中心本身的职责就是维护服务实例，
# 设置为false它也不需要去检索其他服务
eureka.client.fetch-registry=false
#
# :::: 获取服务 ::::
# 当我们启动服务消费者的时候，
# 它会发送一个REST请求给服务注册中心来获取服务注册中心上面的服务提供者列表，
# 而Eureka Server上则会维护一份只读的服务清单来返回给客户端，
# 这个服务清单并不是实时数据，而是一份缓存数据，默认30秒更新一次，
# 另一方面，
# "服务消费端"要确保具有获取服务提供者的能力，请配置 eureka.client.fetch-registry=true
eureka.client.registry-fetch-interval-seconds=30
#
# :::: 向那些Eureka服务器进行服务注册 ::::
# singel 只启动自己时，向自身注册就ok
# 因此直接用 eureka.instance.hostname 和 server.port
eureka.client.service-url.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/
